<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Sass细节一变量]]></title>
      <url>%2F2016%2F12%2F21%2FSass%E5%8F%98%E9%87%8F%2F</url>
      <content type="text"><![CDATA[变量局部变量和全局变量的定义Sass的变量是用$申明的，有局部变量（选择器内部的变量）和全局变量（不在任何选择器内的变量）。例如：123456789101112131415//这里$width就是全局变量$width: 5em;#mian&#123; width: $width;&#125;#sidebar &#123; $height: 4em; height: $height;&#125;/**#sidebar-nav&#123; height: $height; //这里编译的时候会报错，找不到全局变量$height&#125;**/ 当然在选择器内部也可以定义全局变量，例如：1234567#selection&#123; $width: 5em !global; //!global这里$width就定位为全局变量了。 width: $width;&#125;#selection-list&#123; width: $width;&#125; 默认变量定义Sass提供默认变量,根据需求来覆盖默认值，如下：12345$baseLineHeight: 2;$baseLineHeight: 1.5 !default; //这里!default定义$baseLineHeight变量为默认变量body&#123; line-height: $baseLineHeight; &#125; 编译后为：123body &#123; line-height: 2;&#125; 现在假设我们有个scss文件，代码如下(例子来源)：1234567891011121314151617181920212223242526272829303132//文件_imgstyle.scss的内容：// 变量//---------------------------------$imgStyleBorder: 1px solid #ccc !default;$imgStylePadding: 2px !default;$imgStyleRadius: 8px !default;// mixin//---------------------------------@mixin img-border($border:$imgStyleBorder,$padding:$imgStylePadding)&#123; border: $border; padding: $padding;&#125;@mixin img-rounded($radius:$imgStyleRadius)&#123; border-radius:$radius; &#125;//样式//---------------------------------.img-border&#123; @include img-border;&#125;.img-rounded&#123; @include img-rounded;&#125;//文件style.scss内容：//导入_imgstyle.scss@import 'imgstyle'; 以上如果我们要改padding的值为5px，有以下方法： 方法一：重新覆写123456//导入_imgstyle.scss@import 'imgstyle';.img-border&#123; padding:5px;&#125; 解析后的css：12345678910.img-border &#123; border: 1px solid #cccccc; padding: 2px;&#125;.img-rounded &#123; border-radius: 8px;&#125;.img-border &#123; padding: 5px;&#125; 方法二：改变@include的参数123456//导入_imgstyle.scss@import 'imgstyle';.img-border&#123; @include img-border($imgStyleBorder,5px);&#125; 解析后：123456789101112.img-border &#123; border: 1px solid #cccccc; padding: 2px;&#125;.img-rounded &#123; border-radius: 8px;&#125;.img-border &#123; border: 1px solid #cccccc; padding: 5px;&#125; 很明显，重复代码过多，在 变量特殊使用_imgstyle.scss文件中生命变量用了!default默认值，充分利用它的有点，改写style.scss，如下：12345//申明$imgStylePadding为5px$imgStylePadding: 5px;//导入_imgstyle.scss@import 'imgstyle'; 解析后为：12345678.img-border &#123; border: 1px solid #cccccc; padding: 5px;&#125;.img-rounded &#123; border-radius: 8px;&#125; 如果变量需要镶嵌在字符串之中，以不带引号的字符串的方式出现，就必须需要写在”#{}”之中。 12345$position: left;.aside&#123; margin-#&#123;$position&#125;: 30em;&#125; 编译后则是：123.aside &#123; margin-left: 30em;&#125; 变量的特殊规定 Sass变量中带了下划线：’-‘， ‘_’为同一个变量，例如： 1234$main-width: 4em;#main-bard&#123; width: $main_width; //正确，反之亦然。&#125; 多值变量多值变量可用list和map遍历，多值变量想js中的数组和json。 list (列表)list列表可以用空格，逗号，括号隔开。 nth 函数可以直接访问列表中的某一项； join 函数可以将多个列表拼接在一起； append 函数可以将某项添加到列表中； @each 指令可以将添加样式到列表中的每一项。 1234567891011121314$linkColor:#08c #333 !default;a &#123; color: nth($linkColor, 1); &amp;:hover &#123; color: nth($linkColor, 2); &#125;&#125;$classNav: nav-bar,nav-list,nav-item;@each $item in $classNav &#123; .#&#123;$item&#125; &#123; display: inline-block; &#125;&#125; 编译后则是：12345678910111213141516171819a &#123; color: #08c;&#125;a:hover &#123; color: #333;&#125;.nav-bar &#123; display: inline-block;&#125;.nav-list &#123; display: inline-block;&#125;.nav-item &#123; display: inline-block;&#125; map (集合)map集合数据就是以键值对的方式出现，值可以是list。格式为：$map: (key1: value1, key2: value2, key3: value3);。1234567$headings: (h1: 2em 3em, h2: 1.5em 2em, h3: 1.2em 1.5em);@each $header,$size in $headings &#123; #&#123;$header&#125; &#123; font-size: nth($size, 1); height: nth($size, 2); &#125;&#125; 编译后为：1234567891011121314h1 &#123; font-size: 2em; height: 3em;&#125;h2 &#123; font-size: 1.5em; height: 2em;&#125;h3 &#123; font-size: 1.2em; height: 1.5em;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Sass入门]]></title>
      <url>%2F2016%2F12%2F18%2FSass%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[安装Sass是基于ruby的，要先安装ruby环境。ruay下载， ruby安装好以后用以下命令安装sass123gem install sasssass -v //检查是否安装成功 接下来就可以学习sass了 使用sass提供命令把scss转换成css；sass文件扩展名有2种，sass和scss。 sass是以严格的语法规则来书写的，不带大括号”{}”和分号”；” scss则是和css类似的语法方式书写的。 这里我们用学习成本低的，适合开发者入手的scss学起。 编译准确的说只是个转换而已，把sass或scss转换成css。12//通过以下命令把scss 转换成 csssass input.scss output.css 但是在实际项目里面不可能只有一个css，而且css改动非常频繁，每次改动岂不是要进行转换一次？sass提供监听命令，–watch 可以监听一个或者整个目录的scss的变化，每次保存（并且有变动scss都进行转换；通过以下命令：12//意思是把LearnSass目录下的scss全部转换成css，然后保存在LearnCss目录下sass --watch LearnSass:LearnCss SASS开源社区提供一个可视化编译工具，以下例子都可以运行。 开始学习sass的语法 变量用来存储一些重复的CSS值(在整个站点中一致的值)，sass用$定义变量：1234567$font-stack: Helvetica, sans-serif;$primary-color: #333;body &#123; font: 100% $font-stack; color: $primary-color;&#125; $primary-color: 变量的一致性可以使得在改变颜色后不用去整个站点替换，只需要改变这个变量的值即可。 编译后，如下：1234body &#123; font: 100% Helvetica, sans-serif; color: #333;&#125; 嵌套Sass可以明确的体现层次关系：12345678910111213nav&#123; ul&#123; list-style: none; &#125; li&#123; display: inline-block; &#125; a&#123; display: block; padding: 6px 12px; text-decoration: none; &#125;&#125; 转换后的css:12345678910111213nav ul &#123; list-style: none;&#125;nav li &#123; display: inline-block;&#125;nav a &#123; display: block; padding: 6px 12px; text-decoration: none;&#125; 很明显Sass的写法更容易体现HTML的层次关系。 Partials有时候你也许不需要每个scss文件都去转换成css，那么Sass定义了一个规则，用”_”下划线开头的Sass文件则不会被转换。比如用到：1@import '_partials'; 导入一个css，_partials后缀scss可以省略，但是单引号必须要有! 导入12345678910//_partials.scss文件html,body,ul,ol&#123; margin: 0; padding: 0;&#125;body &#123; background-color: $back-color; font-family: $font-stack;&#125; 12345//Basics.scss文件$font-stack: "Microsoft Yahei";$back-color: #eee;@import '_partials'; 最终看到的css文件是这样的：12345678910111213//Basics.css文件html,body,ul,ol &#123; margin: 0; padding: 0;&#125;body &#123; background-color: #eee; font-family: "Microsoft Yahei";&#125; 可以看到在主scss文件中的变量在导入的scss文件中可以使用 Mixin有点像是一个函数。现在css3各大浏览器的写法都不一样，一条样式要写3，4遍麻烦……用Mixin生成每个浏览器供应商的前缀。12345678910111213@mixin border-radius($radius) &#123; -webkit-border-radius: $radius; -moz-border-radius: $radius; -ms-border-radius: $radius; border-radius: $radius;&#125;//使用@include命令，调用这个mixin。.box &#123; @include border-radius(10px); width: 100px; height: 60px; border: 1px solid;&#125; @include命令用来调用定义的 Mixin。 对应的css:123456789.box &#123; -webkit-border-radius: 10px; -moz-border-radius: 10px; -ms-border-radius: 10px; border-radius: 10px; width: 100px; height: 60px; border: 1px solid;&#125; 继承使用@extend命令可以引用一个选择器的样式。1234567891011121314151617181920.message &#123; border: 1px solid #ccc; padding: 10px; color: #333;&#125;.success &#123; @extend .message; border-color: green;&#125;.error &#123; @extend .message; border-color: red;&#125;.warning &#123; @extend .message; border-color: yellow;&#125; 这样的写法可以避免HTML元素上多写类名。这样合理的体现了代码重用。转换后的css:1234567891011121314151617181920.message,.success,.error,.warning &#123; border: 1px solid #ccc; padding: 10px; color: #333;&#125;.success &#123; border-color: green;&#125;.error &#123; border-color: red;&#125;.warning &#123; border-color: yellow;&#125; 计算Sass提供简单的计算，提供标准运算符：+， -， *， /，和%。12345678910111213141516171819.container &#123; width: 100%; &#125;.roleHeight&#123; height: 100px; border: 1px solid; margin-top: 20px;&#125;article[role="main"] &#123; @extend .roleHeight; float: left; width: 600px / 960px * 100%;&#125;aside[role="complementary"] &#123; @extend .roleHeight; float: right; width: 300px / 960px * 100%;&#125; 这是最经典的左右布局。转换后的css:123456789101112131415161718192021.container &#123; width: 100%;&#125;.roleHeight,article[role="main"],aside[role="complementary"] &#123; height: 100px; border: 1px solid; margin-top: 20px;&#125;article[role="main"] &#123; float: left; width: 62.5%;&#125;aside[role="complementary"] &#123; float: right; width: 31.25%;&#125; 到这里相信对Sass的用法也简单了解了，以后的文章会具体介绍下，在项目中的实际使用。 有关代码]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F12%2F15%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
